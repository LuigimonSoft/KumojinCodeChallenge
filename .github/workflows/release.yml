name: Generate Release notes, Build and Docker Image

on:
  release:
    types: [published]

permissions:
    contents: write
    pull-requests: read

jobs:
    build-and-release:
      runs-on: ubuntu-latest

      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Fetch all tags
          run: git fetch --tags

        - name: Set up Node.js
          uses: actions/setup-node@v3
          with:
            node-version: '18'

        - name: Install dependences for frontend
          run: npm install
          working-directory: ./frontend

        - name: Build frontend
          run: npm run build
          working-directory: ./frontend

        - name: Install dependencies for backend
          run: npm install
          working-directory: ./

        - name: Build backend
          run: npm run build
          working-directory: ./

        - name: Create frontend dist directory in backend
          run: mkdir -p ./dist/frontend/dist

        - name: Copy frontend build to backend
          run: cp -r ./frontend/dist/* ./dist/frontend/dist/

        - name: Install Docker CLI
          run: |
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
        
        - name: Extract tag name
          id: extract-tag
          run: |
            tag=${GITHUB_REF##*/}
            echo "Tag: $tag"
            echo "::set-output name=tag::$tag"

        - name: Build Docker image
          run: docker build -t myapp:${{ steps.extract-tag.outputs.tag }} .

        - name: Save Docker image to file
          run: docker save myapp:${{ steps.extract-tag.outputs.tag }} -o site_${{ steps.extract-tag.outputs.tag }}.tar

        - name: Upload Docke image as artifact
          uses: actions/upload-artifact@v3
          with:
            name: site-docker-image
            path: site_${{ steps.extract-tag.outputs.tag }}.tar

        - name: Install Github CLI
          run: |
            sudo apt-get update
            sudo apt-get install -y gh jq

        - name: Configure GitHub CLI authentication
          run: |
            echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

        - name: Fetch previous tag
          id: prev-tag
          run: |
            git fetch --tags
            prev_tag=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
            if [ -z "$prev_tag" ]; then
              echo "No previous tag found"
            else
              echo "Previous tag: $prev_tag"
            fi
            echo "::set-output name=prev_tag::$prev_tag"

        - name: Generate release notes
          id: release-notes
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            features=""
            fixes=""
            if [ -n "${{ steps.prev-tag.outputs.prev_tag }}" ]; then
              prs=$(gh pr list --state merged --search "merged:>=$(git log -1 --pretty=format:%as ${{ steps.prev-tag.outputs.prev_tag }})" --json title,headRefName)
            else
              prs=$(gh pr list --state merged --json title,headRefName)
            fi
            echo "PRs: $prs"
            echo "## What's Changed" > release-notes.txt
            echo "" >> release-notes.txt
            if [ -z "$prs" ]; then
              echo "No PRs found"
              echo -e "## Features\n\n## Fixes\n" > release-notes.txt
            else
              features=$(gh pr list --base $latest_tag --head $current_tag --state merged --json number,title,headRefName --jq '.[] | select(.headRefName | ascii_downcase | startswith("feature/")) | "- \(.title) (#\(.number))"')
              fixes=$(gh pr list --base $latest_tag --head $current_tag --state merged --json number,title,headRefName --jq '.[] | select(.headRefName | ascii_downcase | startswith("fix/")) | "- \(.title) (#\(.number))"' )

              echo "## Features\n${features}\n## Fixes\n${fixes}"
              echo -e "## Features\n${features}\n## Fixes\n${fixes}" > release-notes.txt
            fi
            cat release-notes.txt

        - name: Delete existing release assets
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            release_id=$(gh release view ${GITHUB_REF#refs/tags/} --json id -q .id)
            assets=$(gh release view ${GITHUB_REF#refs/tags/} --json assets -q '.assets[].name')
            for asset in $assets
            do
              gh release delete-asset ${GITHUB_REF#refs/tags/} "$asset" --yes
            done

        - name: Update release notes
          uses: softprops/action-gh-release@v1
          with:
            body_path: release-notes.txt
            files: site_${{ steps.extract-tag.outputs.tag }}.tar
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        - name: Upload Docker image to GitHub Release
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ github.event.release.upload_url }}
            asset_path: ./site_${{ steps.extract-tag.outputs.tag }}.tar
            asset_name: site_${{ steps.extract-tag.outputs.tag }}.tar
            asset_content_type: application/x-tar

